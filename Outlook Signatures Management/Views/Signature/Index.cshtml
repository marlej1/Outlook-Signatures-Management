@model IEnumerable<Outlook_Signatures_Management.Models.Signature>

@{
    ViewBag.Title = "Signatures Index";
}


<div class="row-fluid">
    <div class="col-xs-10"></div>
    <div class="col-xs-2">
        <div class="btn-group">
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" style="margin-top:20px" aria-haspopup="true" aria-expanded="false"><i class="fas fa-plus"></i></button>
            <ul class="dropdown-menu">
                <li><a style="margin-right:2px" data-toggle="modal" data-target="#DesignSignatureModal" href="#">Design a new signature</a></li>
            </ul>
        </div>
    </div>
</div>

<div class="row-fluid">
    <div class="col-xs-2"></div>
    <div class="col-xs-9">
        <table id="SignaturesTable" class="table table-responsive">


            @foreach (var item in Model)
            {
                <tr id="row_@item.SignatureId">

                    <td>
                        @Html.DisplayFor(modelItem => item.SignatureName)
                    </td>
                    <td class="isDefaultCell">
                        @if (item.IsDefault)
                        {
                            <p>Default</p>
                        }
                        else
                        { <h2></h2>}
                    </td>
                    <td class="isForwardReplyCell">
                        @if (item.IsForwardReply)
                        {
                            <p>Forward/Reply</p>
                        }
                        else
                        { <h2></h2>}
                    </td>

                    <td>
                        <div class="btn-group">
                            <button class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fas fa-cog"></i></button>
                            <ul class="dropdown-menu">
                                <li><a data-toggle="modal" onclick="OpenSignatureDetails(@item.SignatureId)" href="#">Open</a></li>
                                <li><a href="#">Copy</a></li>
                                <li><a href="#" data-toggle="modal" data-target="#confirmModal" id="showConfirmDeleteBtn" onclick="showConfirmDeleteSignatureModal(@item.SignatureId)">Delete</a></li>
                            </ul>
                        </div>
                    </td>
                </tr>

            }
        </table>
        <input type="hidden" id="HiddenCamaignId" />
    </div>
    <div class="col-xs-1">
    </div>
</div>



<div class="modal fade" id="DesignSignatureModal" role="dialog">
    <div class="modal-dialog modal-ku" role="document">
        <div class="modal-content">
            <div class="modal-header">

                <h3>Create new signature</h3>
                <div class="container">
                    <div class="row">
                        <div class="col-lg-6 col-lg-offset-3 text-center">
                            <div class="btn-group" role="group">
                                <button type="button" id="designBtnCreate" class="btn btn-primary">Desing</button>
                                <button type="button" id="PreviewBtnCreate" class="btn btn-primary">Preview</button>
                            </div>

                        </div>
                    </div>
                </div>

            </div>
            <div class="modal-body" id="CreateSignatureModalBody">
                @Html.Action("Create")
            </div>
            <div class="modal-footer" id="modal-footer-create">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <input type="reset" value="Save Changes" id="submitbtn" class="btn btn-primary" />
                <button id="InsertText" class="btn btn-default">Click Here to Insert</button>

            </div>



        </div>



        </div>
    </div>
</div>

<div class="modal fade" id="EditSignatureModal" role="dialog">
    <div class="modal-dialog modal-ku" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <div class="container">
                    <div class="row">
                        <div class="col-lg-6 col-lg-offset-3 text-center">
                            <div class="btn-group" role="group">
                                <button type="button" id="designBtn" class="btn btn-primary">Desing</button>
                                <button type="button" id="PreviewBtn" class="btn btn-primary">Preview</button>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-body" id="EditSignatureModalBody">

            </div>
            <div class="modal-footer" id="modal-footer-edit">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <input type="reset" value="Save Changes" id="SaveChangesbtn" class="btn btn-primary" />
            </div>



        </div>
    </div>
</div>

<div class="modal fade" id="confirmDeleteSignatureModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this Signature?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="deleteSignatureBtn">Delete</button>
            </div>
        </div>
    </div>
</div>




@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/ckeditor/ckeditor.js"></script>

    <script>

        let editor = CKEDITOR.replace('Body');
        let editedSignatureId;
        // let editorEdit = CKEDITOR.replace('edit-body');
        let idOfEditedSignature;

        let OpenSignatureDetails = function (signatureId) {
            editedSignatureId = signatureId;
            $.ajax(
                {
                    type: "GET",
                    data: { signatureId: signatureId },
                    url: "/Signature/Edit",
                    success: function (response) {
                        $("#EditSignatureModalBody").html(response);
                        let instance = CKEDITOR.instances["edit-body"];
                        if (!instance) {
                            editSignatureEditor = CKEDITOR.replace('edit-body');
                        } else {
                            instance.destroy(true);
                            editSignatureEditor = CKEDITOR.replace('edit-body');

                        }
                        $("#EmployeeFieldsEdit").change(function () {
                            CKEDITOR.instances["edit-body"].insertHtml($("#EmployeeFieldsEdit").val());
                        });
                        
                                                        
                        $("#EditSignatureModal").modal("show");


                    }
                }
            )

        }

        $("#EmployeeFieldsCreate").change(function () {
            CKEDITOR.instances["Body"].insertHtml($("#EmployeeFieldsCreate").val());
        });
      

        $('#SaveChangesbtn').on('click', function () {
            let body = editSignatureEditor.getData();
            var formData = $('#SignatureEditForm').serializeArray();

            if (!$('#SignatureEditForm').valid()) {
                return false;
            }


            //below conditionals checks if there duplicate entries in form data

            if ((formData[4].name == "IsDefault" && formData[5].name == "IsDefault") && (formData[2].name == "IsForwardReply" && formData[3].name == "IsForwardReply")) {
                formData.splice(3, 1);
                formData.splice(4, 1);
            }
            else if (formData[3].name == "IsForwardReply") {
                formData.splice(3, 1);
            }
            else if (formData[3].name == "IsDefault" && formData[4].name == "IsDefault") {
                formData.splice(4, 1);
            }



            formData[4].value = body;
            $.ajax(
                {
                    type: "POST",
                    data: formData,
                    url: "/Signature/Edit",
                    success: function (response) {
                        $("#EditSignatureModal").modal("hide");
                        $("#row_" + response.SignatureId + " td:nth-child(1)").html(response.SignatureName);


                        if (response.IsDefault) {
                            $('.isDefaultCell').html('<p></p>');
                            $("#row_" + response.SignatureId + " td:nth-child(2)").html('<p>Default</p>');
                        }
                        if (response.IsForwardReply) {
                            $('.isForwardReplyCell').html('<p></p>');
                            $("#row_" + response.SignatureId + " td:nth-child(3)").html('<p>Forward/Reply</p>');
                        }
                    }
                }
            )

        })

       

       

        $('#submitbtn').on('click', function () {

            var body = editor.getData();
            var formData = $('#SignatureCreateForm').serializeArray();

            if (!$('#SignatureCreateForm').valid()) {
                return false;
            }

            //below conditionals check if there duplicate entries in form data

            if ((formData[4].name == "IsDefault" && formData[5].name == "IsDefault") && (formData[2].name == "IsForwardReply" && formData[3].name == "IsForwardReply")) {
                formData.splice(3, 1);
                formData.splice(4, 1);
            }
            else if (formData[3].name == "IsForwardReply") {
                formData.splice(3, 1);
            }
            else if (formData[3].name == "IsDefault" && formData[4].name == "IsDefault") {
                formData.splice(4, 1);
            }

            formData[4].value = body;
            $.ajax(
                {
                    type: "POST",
                    data: formData,
                    url: "/Signature/Create",
                    success: function (response) {
                        $("#DesignSignatureModal").modal("hide");


                        var ThirdRd = "<td> <div class='btn-group'><button class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"fas fa-cog\"></i></button>\<ul class=\"dropdown-menu\"><li><a data-toggle=\"modal\" onclick=\"OpenSignatureDetails(" + response.SignatureId + ")\" href=\"#\">Open</a></li><li><a href=\"#\">Copy</a></li><li><a href=\"#\" data - toggle=\"modal\" data - target=\"#confirmModal\" id = \"showConfirmDeleteBtn\" onclick = \"showConfirmDeleteSignatureModal(" + response.SignatureId + ")\" > Delete</a ></li ></ul> </div></td>"

                        let isdefault = "<p></p>";
                        if (response.IsDefault) {
                            isdefault = "<p>Default</p>"
                        }
                        let isforwardreply = "<p></p>";
                        if (response.IsDefault) {
                            isforwardreply = "<p>Forward/Reply</p>"
                        }


                        $('#SignaturesTable').append("<tr><td>" + response.SignatureName + "</td><td>" + isdefault + "</td>" + "</td><td>" + isforwardreply + "</td>" + ThirdRd + "</tr>");




                    }
                }
            )
        })

        let hiddenSignatureId;

        let showConfirmDeleteSignatureModal = function (signatureId) {
            //  $('#SignatureIdInput').val(signatureId);
            hiddenSignatureId = signatureId;
            $("#confirmDeleteSignatureModal").modal("show");
        }

        $('#deleteSignatureBtn').on('click', function () {
            let id = hiddenSignatureId;

            $.ajax({
                type: "POST",
                data: { id: id },
                url: "/Signature/Delete",
                success: function () {
                    $('#row_' + id).remove();
                    $("#confirmDeleteSignatureModal").modal("hide");



                }
            })
        }
        )

      

        let previewMode = false;
        $('#designBtn').on('click', function (e) {
           
            e.preventDefault();
            if (previewMode) {
                OpenSignatureDetails(editedSignatureId);
                $('#modal-footer-edit').show("slow");
                previewMode = false;


            }

        })

        $('#designBtnCreate').on('click', function (e) {

            e.preventDefault();
            if (previewModeCreate) {
                $('#modal-footer-create').show("slow");
                //$("#CreateSignatureModalBody").load("/Signature/CreatePreview");
                previewModeCreate = false;

                $.ajax(
                    {

                        type: "GET",
                        url: "/Signature/Create",
                        success: function (response) {
                            $("#CreateSignatureModalBody").html(response);
                            let instance = CKEDITOR.instances["Body"];
                            if (!instance) {
                                editor = CKEDITOR.replace('Body');
                            } else {
                                instance.destroy(true);
                                editor = CKEDITOR.replace('Body');

                            }

                            
                            

                            $("#EmployeeFieldsCreate").change(function () {
                                CKEDITOR.instances["Body"].insertHtml($("#EmployeeFieldsCreate").val());
                            });
                            editor.setData(EditorBody);


                        },
                        error: function (jqxhr, status, exception) {
                            alert('Exception:' + exception + ',  ' + jqxhr.responseText);
                        }

                    })
            }
        })

            

       

        let previewModeCreate = false;
        
        let EditorBody = '';
        $('#PreviewBtnCreate').on('click', function () {
            let previewSignature;
            ;
            if (!previewModeCreate) {
                previewModeCreate = true;
                $('#modal-footer-create').hide("slow");
                debugger
                EditorBody = editor.getData();
            }
            $.ajax(
                {
                    
                    type: "GET",
                    data: { bodyContent: EditorBody},
                    url: "/Signature/CreatePreview",
                    success: function (response) {
                        $("#CreateSignatureModalBody").html(response);

                        $('#employeeId-create').change(function () {
                            let employeeIdValue = $(this).val();
                            

                            $.ajax({

                                type: "GET",
                                data: {
                                    employeeId: employeeIdValue,
                                    bodyContent: EditorBody
                                },
                                url: "/Signature/CustomCreatePreview",
                                success: function (response) {
                                    document.querySelector('#preview-body-create').innerHTML = response;
                                   
                                    let instance = CKEDITOR.instances["preview-body-create"];
                                    if (!instance) {
                                        previewSignature = CKEDITOR.replace('preview-body-create', { removePlugins: 'toolbar' });

                                    } else {
                                        instance.destroy(true);
                                        previewSignature = CKEDITOR.replace('preview-body-create', { removePlugins: 'toolbar' });
                                    }

                                    //  alert(document.querySelector('#preview-body').innerText);

                                },
                                error: function (jqxhr, status, exception) {
                                    alert('Exception:' + exception + ',  ' + jqxhr.responseText);
                                }

                            })

                        })

                        let instance = CKEDITOR.instances["preview-body-create"];
                        if (!instance) {
                            previewSignature = CKEDITOR.replace('preview-body-create', { removePlugins: 'toolbar' });

                        } else {
                            instance.destroy(true);
                            previewSignature = CKEDITOR.replace('preview-body-create', { removePlugins: 'toolbar' });
                        }
                    },
                    error: function (jqxhr, status, exception) {
                        alert('Exception:' + exception + ',  ' + jqxhr.responseText);
                    }
                })
        });

        $('#PreviewBtn').on('click', function () {

            let previewSignature;
            if (!previewMode) {
                previewMode = true;
                $('#modal-footer-edit').hide("slow");
                $.ajax(
                    {
                        type: "GET",
                        data: { signatureId: editedSignatureId },
                        url: "/Signature/Preview",
                        success: function (response) {
                            $("#EditSignatureModalBody").html(response);

                            $('#EmployeeId').change(function () {
                                let employeeIdValue = $(this).val();
                                let signatureId = editedSignatureId;

                                $.ajax({

                                    type: "GET",
                                    data: {
                                        employeeId: employeeIdValue,
                                        signatureId: signatureId
                                    },
                                    url: "/Signature/EditPreview",
                                    success: function (response) {
                                        document.querySelector('#preview-body').innerHTML = response;
                                        let instance = CKEDITOR.instances["preview-body"];
                                        if (!instance) {
                                            previewSignature = CKEDITOR.replace('preview-body', { removePlugins: 'toolbar' });

                                        } else {
                                            instance.destroy(true);
                                            previewSignature = CKEDITOR.replace('preview-body', { removePlugins: 'toolbar' });
                                        }

                                        //  alert(document.querySelector('#preview-body').innerText);

                                    },
                                    error: function (jqxhr, status, exception) {
                                        alert('Exception:' + exception + ',  ' + jqxhr.responseText);
                                    }

                                })

                            })
                            let instance = CKEDITOR.instances["preview-body"];
                            if (!instance) {
                                previewSignature = CKEDITOR.replace('preview-body', { removePlugins: 'toolbar' });

                            } else {
                                instance.destroy(true);
                                previewSignature = CKEDITOR.replace('preview-body', { removePlugins: 'toolbar' });
                            }

                        },
                        error: function (jqxhr, status, exception) {
                            alert('Exception:', exception);
                        }
                    }
                )
            }

        })
       


        //function insertAtCaret(areaId, text) {
        //    var txtarea = document.getElementById(areaId);
        //    if (!txtarea) {
        //        return;
        //    }

            

        //    var scrollPos = txtarea.scrollTop;
        //    var strPos = 0;
        //    var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?
        //        "ff" : (document.selection ? "ie" : false));
        //    if (br == "ie") {
        //        txtarea.focus();
        //        var range = document.selection.createRange();
        //        range.moveStart('character', -txtarea.value.length);
        //        strPos = range.text.length;
        //    } else if (br == "ff") {
        //        strPos = txtarea.selectionStart;
        //    }

        //    var front = (txtarea.value).substring(0, strPos);
        //    var back = (txtarea.value).substring(strPos, txtarea.value.length);
        //    txtarea.value = front + text + back;
        //    strPos = strPos + text.length;
        //    if (br == "ie") {
        //        txtarea.focus();
        //        var ieRange = document.selection.createRange();
        //        ieRange.moveStart('character', -txtarea.value.length);
        //        ieRange.moveStart('character', strPos);
        //        ieRange.moveEnd('character', 0);
        //        ieRange.select();
        //    } else if (br == "ff") {
        //        txtarea.selectionStart = strPos;
        //        txtarea.selectionEnd = strPos;
        //        txtarea.focus();
        //    }

        //    txtarea.scrollTop = scrollPos;
        //}

        
    </script>


    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

}


